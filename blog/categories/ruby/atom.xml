<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | My Musings]]></title>
  <link href="http://blog.hyfather.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.hyfather.com/"/>
  <updated>2013-03-06T03:11:47-08:00</updated>
  <id>http://blog.hyfather.com/</id>
  <author>
    <name><![CDATA[Nikhil Mungel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crafting Beautiful Command Line Applications with Ruby]]></title>
    <link href="http://blog.hyfather.com/blog/2012/09/20/crafting-beautiful-command-line-applications-with-ruby/"/>
    <updated>2012-09-20T12:47:00-07:00</updated>
    <id>http://blog.hyfather.com/blog/2012/09/20/crafting-beautiful-command-line-applications-with-ruby</id>
    <content type="html"><![CDATA[<p>Earlier this year, <a href="http://twitter.com/shishirdas" title="@shishirdas">Shishir Das</a> and I presented at RubyConf India 2012 on how to go
about crafting beautiful, utilitarian and functioning command line
applications using Ruby.</p>

<p>And then this week, I got a chance to speak about the same topic at
the Ruby Lightning Talk series organized by the great folks at
<a href="http://www.apartmentlist.com/">ApartmentList</a> and
<a href="http://thoughtbot.com/">Thoughtbot</a>Â in the heart of SoMa in San
Francisco. I condensed the
<a href="http://slidesha.re/rubycli" title="View the slideshow at slideshare.net">full-format presentation</a>
from earlier this year into this crisp 10 minute talk that I've embedded here --</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14362934"
width="427" height="356" frameborder="0" marginwidth="0"
marginheight="0" scrolling="no" style="border:1px solid
#CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen
webkitallowfullscreen mozallowfullscreen> </iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundler and RVM]]></title>
    <link href="http://blog.hyfather.com/blog/2011/10/18/bundler/"/>
    <updated>2011-10-18T06:35:00-07:00</updated>
    <id>http://blog.hyfather.com/blog/2011/10/18/bundler</id>
    <content type="html"><![CDATA[<p>Almost everyone I know who writes any Ruby outside of the <a href="http://en.wikipedia.org/wiki/Interactive_Ruby_Shell">irb REPL</a> uses Bundler.
And <em>everyone</em> I know uses RVM to manage their rubies and their gems locally, except for this one guy who uses <a href="https://github.com/sstephenson/rbenv">rbenv</a> (which is a great tool, more on that in another blog post).</p>

<p>I have observed people use different strategies and workflows with bundler and RVM, since there is at least one overlap in what they do: manage collections of rubygems.
Bundler calles them <em>bundles</em> and RVM calles them <em>gemsets</em>.</p>

<p>Broadly, here are two patterns.</p>

<h3>Pattern #1</h3>

<p>When a new project is cloned or intialized, an RVM gemset is created with the project's name.
Then, every time one wishes to work on that project, they switch to that gemset using the .rvmrc.</p>

<h3>Pattern #2</h3>

<p>When cloning or initilizing a new project on the system, no gemsets are explicitly created in RVM.
Instead, bundler is used to manage all gemmy things across the system and across projects.</p>

<p><code>bundle install --path .gems</code></p>

<p>This <code>--path</code> helps keeping the global RVM gem-space always empty (except for bundler.gem, rake.gem and rails.gem, to initlialize new projects.)
This also results in one's <code>.bundle/config</code> file to now contain the entry</p>

<p><code>BUNDLE\_PATH: .gems</code></p>

<p>And of course, .gems should be ignored by your SCM.</p>

<p><code>echo ".gems" \&gt;\&gt; .gitignore \# if you use git.</code></p>

<p><em><strong>protip:</strong> I also include .gems when I create my tagfile. This helps me to quickly jump into the gem's codebase using my editor.</em></p>

<h3>Why do I shamelessly try selling Pattern #2 to everyone I meet?</h3>

<p>Bundler is closer to the project while RVM is closer to the system. I like to have my project's gems in my project's directory managed with a tool built for the job.</p>

<p>Bundler stays with you in production.env while RVM might not, depending on the sysadmin and the situation at hand. I uniformly work on a philosophy of keeping my development as close to production with regards to the toolchain. No, I don't run RHEL on my laptop.</p>

<p>One additional step encountered is prefixing every command that needs to run in the project context by <code>bundle exec</code> (I have it aliased to <code>bx</code>).
Which is only fair, since that is how every command would run on production.env.</p>

<p>e. g. <code>bundle exec rake db:migrate</code> or <code>bx rails dbconsole</code></p>

<p><em><strong>protip:</strong> Forgot to prefix <code>bx</code> to the previous command? Run <code>bx !!</code>.</em></p>

<p>UPDATE: @tdinkar <a href="https://twitter.com/tdinkar/status/126517974759776256">pointed me</a> to passing the <code>--binstubs</code> flag to bundle install that gets rid of having to use <code>bundle exec</code> for every executable command to be run in the bundled context.
Here is Yehuda's <a href="http://yehudakatz.com/2011/05/30/gem-versioning-and-bundler-doing-it-right/">blog post</a> delving into more detail about the <code>--binstubs</code> flag and the reason for its existence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps at ChicagoRuby]]></title>
    <link href="http://blog.hyfather.com/blog/2011/09/01/devops-at-chicagoruby/"/>
    <updated>2011-09-01T01:41:00-07:00</updated>
    <id>http://blog.hyfather.com/blog/2011/09/01/devops-at-chicagoruby</id>
    <content type="html"><![CDATA[<p>Presented earlier this year in January 2011, Chris Breisemeister put forth a few practices that we follow
when working with a variety of large enterprise clients on software delivery and enablement.</p>

<p>We start right from the basics of what lifecycle does a line of code typically follow to how
different environments should be configured and managed.</p>

<p>Since we talked to a Ruby audience, we talk specifically about release practices and workflows of
Ruby on Rails applications centered around Continuous Integration that have enabled us to deploy extremely fast.</p>

<p>Chris Breeze is a colleague who works out of the Chicago office, he is also the man behind <a href="http://www.chicagocarp.com/">Chicago Carp</a>.</p>

<h3>Here is the Prezi, use your arrow keys to navigate through it --</h3>

<iframe src="http://prezi.com/embed/t1kqwr-z7yer/?bgcolor=ffffff&amp;lock_to_path=1&amp;autoplay=no&amp;autohide_ctrls=0&amp;features=undefined&amp;disabled_features=undefined"
width="550" height="400" frameBorder="0"></iframe>


<hr />

<h3>And here is the video from ChicagoRuby --</h3>

<iframe src="http://player.vimeo.com/video/18449682?color=ff9933"
width="500" height="375" frameborder="0" webkitAllowFullScreen
mozallowfullscreen allowFullScreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deployment Patterns in the Ruby on Rails World]]></title>
    <link href="http://blog.hyfather.com/blog/2011/08/28/deployment-patterns-in-the-ruby-on-rails-world/"/>
    <updated>2011-08-28T23:45:00-07:00</updated>
    <id>http://blog.hyfather.com/blog/2011/08/28/deployment-patterns-in-the-ruby-on-rails-world</id>
    <content type="html"><![CDATA[<p><a href="http://www.twitter.com/ajeygore">@AjeyGore</a> and I presented deployment patterns and paradigms that we've observed and influenced while consulting and enabling numerous clients.</p>

<p>The ones at the beginning are ideal for smaller scale applications that do not typically need to scale fast.
We also go on to talk on more advanced patterns by using system-level
packing tools that can enable an application to scale very rapidly if
you use Chef or Puppet.</p>

<p>We presented this at DevOpsDays Bangalore 2011.</p>

<iframe scrolling="no" marginheight="0" marginwidth="0"
src="http://www.slideshare.net/slideshow/embed_code/9047887"
frameborder="0" height="355" width="425"></iframe>

]]></content>
  </entry>
  
</feed>
