<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rvm | My Musings]]></title>
  <link href="http://blog.hyfather.com/blog/categories/rvm/atom.xml" rel="self"/>
  <link href="http://blog.hyfather.com/"/>
  <updated>2013-03-09T01:37:54-08:00</updated>
  <id>http://blog.hyfather.com/</id>
  <author>
    <name><![CDATA[Nikhil Mungel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bundler and RVM]]></title>
    <link href="http://blog.hyfather.com/blog/2011/10/18/bundler/"/>
    <updated>2011-10-18T06:35:00-07:00</updated>
    <id>http://blog.hyfather.com/blog/2011/10/18/bundler</id>
    <content type="html"><![CDATA[<p>Almost everyone I know who writes any Ruby outside of the <a href="http://en.wikipedia.org/wiki/Interactive_Ruby_Shell">irb REPL</a> uses Bundler.
And <em>everyone</em> I know uses RVM to manage their rubies and their gems locally, except for this one guy who uses <a href="https://github.com/sstephenson/rbenv">rbenv</a> (which is a great tool, more on that in another blog post).</p>

<p>I have observed people use different strategies and workflows with bundler and RVM, since there is at least one overlap in what they do: manage collections of rubygems.
Bundler calles them <em>bundles</em> and RVM calles them <em>gemsets</em>.</p>

<p>Broadly, here are two patterns.</p>

<h3>Pattern #1</h3>

<p>When a new project is cloned or intialized, an RVM gemset is created with the project's name.
Then, every time one wishes to work on that project, they switch to that gemset using the .rvmrc.</p>

<h3>Pattern #2</h3>

<p>When cloning or initilizing a new project on the system, no gemsets are explicitly created in RVM.
Instead, bundler is used to manage all gemmy things across the system and across projects.</p>

<p><code>bundle install --path .gems</code></p>

<p>This <code>--path</code> helps keeping the global RVM gem-space always empty (except for bundler.gem, rake.gem and rails.gem, to initlialize new projects.)
This also results in one's <code>.bundle/config</code> file to now contain the entry</p>

<p><code>BUNDLE\_PATH: .gems</code></p>

<p>And of course, .gems should be ignored by your SCM.</p>

<p><code>echo ".gems" \&gt;\&gt; .gitignore \# if you use git.</code></p>

<p><em><strong>protip:</strong> I also include .gems when I create my tagfile. This helps me to quickly jump into the gem's codebase using my editor.</em></p>

<h3>Why do I shamelessly try selling Pattern #2 to everyone I meet?</h3>

<p>Bundler is closer to the project while RVM is closer to the system. I like to have my project's gems in my project's directory managed with a tool built for the job.</p>

<p>Bundler stays with you in production.env while RVM might not, depending on the sysadmin and the situation at hand. I uniformly work on a philosophy of keeping my development as close to production with regards to the toolchain. No, I don't run RHEL on my laptop.</p>

<p>One additional step encountered is prefixing every command that needs to run in the project context by <code>bundle exec</code> (I have it aliased to <code>bx</code>).
Which is only fair, since that is how every command would run on production.env.</p>

<p>e. g. <code>bundle exec rake db:migrate</code> or <code>bx rails dbconsole</code></p>

<p><em><strong>protip:</strong> Forgot to prefix <code>bx</code> to the previous command? Run <code>bx !!</code>.</em></p>

<p>UPDATE: @tdinkar <a href="https://twitter.com/tdinkar/status/126517974759776256">pointed me</a> to passing the <code>--binstubs</code> flag to bundle install that gets rid of having to use <code>bundle exec</code> for every executable command to be run in the bundled context.
Here is Yehuda's <a href="http://yehudakatz.com/2011/05/30/gem-versioning-and-bundler-doing-it-right/">blog post</a> delving into more detail about the <code>--binstubs</code> flag and the reason for its existence.</p>
]]></content>
  </entry>
  
</feed>
