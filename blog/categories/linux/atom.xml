<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Nikhil Mungel]]></title>
  <link href="http://blog.hyfather.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.hyfather.com/"/>
  <updated>2013-06-02T19:48:56-07:00</updated>
  <id>http://blog.hyfather.com/</id>
  <author>
    <name><![CDATA[Nikhil Mungel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Missing Man Page for ifconfig]]></title>
    <link href="http://blog.hyfather.com/blog/2013/03/04/ifconfig/"/>
    <updated>2013-03-04T00:28:00-08:00</updated>
    <id>http://blog.hyfather.com/blog/2013/03/04/ifconfig</id>
    <content type="html"><![CDATA[<p>This is actually very unlike a man page. It assumes that you know very little about
TCP/IP networking. It also deals with only the parameter-less
invocation of <code>ifconfig</code>, since other invocations are well documented
in the real man page.<br/>
You can read the sections independently of one another, skipping what
you already know. In this regard, it is quite like a man page.</p>

<!-- more -->


<h2>What is ifconfig?</h2>

<p><code>ifconfig</code> is a systems administration utility for UNIX-like systems
that allows for diagnosing and configuring network
interfaces. Although some claim that it is being replaced with <code>iproute2</code> (or simply the <code>ip</code> command), I
have seen it being used abundantly.<br/>
You can using <code>ifconfig</code> to bring up interfaces, turn them off, and configure
the protocols and identifiers they use.</p>

<h3>Why document it?</h3>

<p><code>ifconfig</code> prints out a wealth of information if invoked
without any parameters and options. I simply could not find the
definitions of most of these things and what follows
is my attempt at documenting these exhaustively.</p>

<hr />

<p>This is what we see when we invoke GNU <code>ifconfig</code> on a virtual host running
Ubuntu. Note the absence of a wifi interface, as is the case with most
servers.</p>

<pre><code>$ ifconfig
eth0      Link encap:Ethernet  HWaddr 08:00:27:0c:49:47  
          inet addr:192.168.0.121  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe0c:4947/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3461 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3686 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1778710 (1.7 MB)  TX bytes:821363 (821.3 KB)
          Interrupt:10 Base address:0xd020 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:720 (720.0 B)  TX bytes:720 (720.0 B)
</code></pre>

<hr />

<h2>The Ethernet Interface</h2>

<pre><code>eth0      Link encap:Ethernet  HWaddr 08:00:27:0c:49:47  
</code></pre>

<p> Application data is progressively encapsulated as it descends through
 the layers of the TCP/IP Stack. <code>Link encap:Ethernet</code> means that IP
 Datagrams coming from the Internet layer will be wrapped in an Ethernet
 Frame before leaving this interface.</p>

<p><code>HWaddr 08:00:27:0c:49:47</code> is the 48 bit Media Access Control (MAC) address. It uniquely
 identifies this network interface on the hardware layer. This address
 will be sent in ARP (Address Resolution Protocol) reponse packets when other devices want to send
 Ethernet Frames to this interface.</p>

<h3>The IPv4 address</h3>

<pre><code>eth0      inet addr:192.168.0.121  Bcast:192.168.0.255  Mask:255.255.255.0
</code></pre>

<p> <code>inet addr:192.168.0.121</code> needs no introduction, it is the 32 bit IPv4 address that
 this interface is using. Wanting to know this address is also probably the most common reason
 for invoking <code>ifconfig</code>.</p>

<p> Modern networking relies on slicing networks
 into smaller portions using subnetting and Classless
 Inter-Domain Routing (CIDR).
 For subnetting to work, we need to understand what part of
 an IP address is the Network ID and what part is the Host ID. This
 information is carried in the Network Mask <code>Mask:255.255.255.0</code>.</p>

<p> <code>Bcast:192.168.0.255</code> is the broadcast address of the subnetwork the interface is
 on. Packets sent to this address will be received by all interfaces
 on this subnet.<br/>
 We get this the broadcast address by masking the IP Address with a
 bit complement of the network mask <code>Mask:255.255.255.0</code> like this --</p>

<pre><code>Network Mask:           255 . 255 . 255 .   0

Complement all bits:      0 .   0 .   0 . 255
Original IP address:    192 . 168 .   0 . 121
                        _____________________
OR them bitwise:        192 . 168 .   0 . 255
                        Which is the Broadcast Address
</code></pre>

<h3>Next, let's go over the IPv6 address</h3>

<p>I never paid much attention to IPv6 addresses in the past. However, it
isn't too complicated to get to the bottom of it. Your local IPv6
addresses are essentially based on the MAC address of the interface.</p>

<pre><code>eth0      inet6 addr: fe80::a00:27ff:fe0c:4947/64 Scope:Link
</code></pre>

<p><code>fe80::a00:27ff:fe0c:4947/64</code> is the 128 bit link-local IPv6 address
for the interface. We understand that it is a link-local address
because of the <code>Scope:Link</code> field. Link-local IPv6 addresses are for
communicating with the directly attached network, and not globally.</p>

<pre><code>This is how all link-local addresses are laid out:

10 bytes     | 54 bytes   | 64 bytes
1111 1110 10 | All Zeroes | Interface Identifier

Let's see whether our IPv6 address conforms to this pattern:

                fe80::a00:27ff:fe0c:4947

  (we replace :: with multiple all-zero double-octets)

      fe80:0000:0000:0000 : 0a00:27ff:fe0c:4947

           PREFIX         |   INTERFACE IDENTIFER
  All these zeroes make a | This looks a lot similiar
  link-local IPv6 address | to the MAC address which
  non-routable            | is '08:00:27:0c:49:47'
</code></pre>

<p>The Interface Identifier is in fact usually made up using the MAC
address. This is called EUI-64, or Extended Unique Indentifier by the IEEE.</p>

<pre><code>  08:00:27:0c:49:47        # Start with the MAC adress

  08:00:27:ff:fe:0c:49:47  # Insert ff:fe in the center
  0a:00:27:ff:fe:0c:49:47  # Invert the 7th MSB starting from the right

  0a00:27ff:fe0c:4947      # Group it into double octets!
</code></pre>

<h3>More about the interface</h3>

<pre><code> eth0     UP BROADCAST RUNNING MULTICAST MTU:1500  Metric:1
</code></pre>

<p><code>UP</code> means that network interface is activated (with address and routing
tables) and is accessible to the IP layer.<br/>
<code>BROADCAST</code> means that interface supports broadcasting (and can hence obtain
an IP address using DHCP).<br/>
<code>RUNNING</code> signifies that the network driver has been loaded and has
initialized the interface.<br/>
<code>MULTICAST</code> tells us that multicasting support is enabled on this
interface.<br/>
Since we didn't invoke <code>ifconfig</code> with the <code>--all</code> flag, it will only
print out interfaces that are currently <code>UP</code>.</p>

<p><code>MTU 1500</code> shows that the current <code>Maximum Transmission Unit</code> is set to 1500 bytes, the largest
allowed over Ethernet. Any IP datagrams larger than 1500 bytes will be
fragmented into multiple Ethernet Frames, <em>if allowed</em> by the routers
and hosts in between. Else we'll just get an ICMP <code>Destination
Unreachable</code> response with Code 4.</p>

<p>And finally, <code>Metric:1</code> is the cost associated with routing frames
over this interface. Normally, Linux kernels don't build routing
tables based on metrics. This value is only present for
compatibility. If you do try to change the metric, it may not work. [1]</p>

<pre><code>$ sudo ifconfig eth0 metric 2
SIOCSIFMETRIC: Operation not supported
</code></pre>

<h3>Statistics</h3>

<pre><code>eth0      RX packets:3461 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3686 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1778710 (1.7 MB)  TX bytes:821363 (821.3 KB)
</code></pre>

<p><code>RX</code> stands for received and <code>TX</code> stands for transmitted.
Documentation for the fields that follow is sparse and only
long-deserted ghost-town forums popped up in my searches.
I download the source code for <code>GNU inetutils 1.9.1</code>
and here are my findings after a few recursive greps:<br/>
<code>RX packets</code>: total number of packets received.<br/>
<code>RX errors</code>: an aggregation of the total number of packets received
with errors. This includes too-long-frames errors, ring-buffer overflow errors, crc errors,
frame alignment errors, fifo overruns, and missed packets. <br/>
The ring-buffer refers to a buffer that the NIC transfers frames to before raising an IRQ with the
kernel.<br/>
The <code>RX overruns</code> field displays fifo overruns, which are
caused by the rate at which the ring-buffer is drained being higher
that the kernel being able to handle IO.
<code>RX frame</code> accounts for the incoming frames that were misaligned.</p>

<p><code>TX packets</code> indicate the total number of transmitted packets.<br/>
<code>TX errors</code> present a summation of errors encountered while
transmitting packets. This list includes errors due to the
transmission being aborted, errors due to the carrier, fifo errors,
heartbeat errors, and window errors. <em>This particular <code>struct</code> in the source code
isn't commented.</em><br/>
We also have itemized error counts for <code>dropped</code>, <code>overruns</code>, and
<code>carrier</code>.<br/>
<code>collisions</code> is the number of transmissions terminated due to CSMA/CD
(Carrier Sense Multiple Access with Collision Detection).</p>

<p>The final line is merely all successfully received and
transmitted data in bytes and a human readable format.</p>

<h3>Transmit Queue Length</h3>

<p>Since this isn't a statistic, it gets its own heading.<br/>
The <code>txqueuelen</code> field displays the current Transmit
Queue Length.
This queue limits the number of frames in the interface's device driver that are queued for
transmission.
The value of the <code>txqueuelen</code> can also be set by the <code>ifconfig</code> command.</p>

<h3>Interrupts</h3>

<pre><code>eth0      Interrupt:10 Base address:0xd020 
</code></pre>

<p><code>Interrupt:10</code> corresponds to the IRQ number against which to look up
the <code>eth0</code> device in <code>/proc/interrupts</code>, where the interrupts are counted.</p>

<pre><code>$ cat /proc/interrupts 
               CPU0       
      0:        115    XT-PIC-XT-PIC    timer
      1:       3402    XT-PIC-XT-PIC    i8042
      2:          0    XT-PIC-XT-PIC    cascade
      5:          1    XT-PIC-XT-PIC    snd_intel8x0
      8:          0    XT-PIC-XT-PIC    rtc0
      9:          0    XT-PIC-XT-PIC    acpi
=&gt;   10:      53981    XT-PIC-XT-PIC    eth0             &lt;=
     11:       1535    XT-PIC-XT-PIC    ohci_hcd:usb1
     12:        146    XT-PIC-XT-PIC    i8042
     14:      16923    XT-PIC-XT-PIC    ata_piix
     15:      10416    XT-PIC-XT-PIC    ata_piix
</code></pre>

<p><code>53981</code> is the number of times the <code>eth0</code> device has interrupted <code>CPU0</code>.<br/>
The third column tells the name of the programmable interrupt handler,
and <code>XT-PIC-XT-PIC</code> may be something that my VirtualBox is doing.</p>

<hr />

<h2>The Loopback Interface</h2>

<pre><code>lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:720 (720.0 B)  TX bytes:720 (720.0 B)
</code></pre>

<h3>The Loopback is not an Ethernet device.</h3>

<p>It isn't connected to the NIC (or any hardware) and frames relayed over
the loopback don't exit the host on any layer. It is fully implemented
in software. This also means that IP Datagrams sent over this
interface are not encapsulted in an Ethernet frame, as can be seen by
<code>Link encap:Local Loopback</code>.</p>

<h3>IPv4 Addressing</h3>

<pre><code>lo        inet addr:127.0.0.1  Mask:255.0.0.0
</code></pre>

<p>We have a large address space as set by the liberal subnet mask --
<code>Mask:255.0.0.0</code>.
The loopback device can be configured with an IP address on the <code>127.0.0.0/8</code> subnetwork which can be any address between <code>127.0.0.1</code> to
<code>127.255.255.254</code>. The loopback address on my machine is <code>127.0.0.1</code>, which is usually the default.</p>

<h3>And the IPv6</h3>

<pre><code>lo        inet6 addr: ::1/128 Scope:Host
</code></pre>

<p>Unlike IPv4, only one address is reserved for the loopback interface in
the IPv6 address space -- <code>0:0:0:0:0:0:0:1</code>. It represented more
succintly as <code>::1/128</code> since we can replace consecutive groups of <code>0</code>
by a <code>::</code>.<br/>
The IPv6 Scope for the loopback address <code>::1/128</code> and is treated under the
<code>link-local</code> scope in RFC 3513. The terminology <code>Scope:Host</code> or
<code>Scope:Node</code> is also used to further emphasize that the packet will never exit the host
(or node). Unlike other link-local addresses, if a packet addressed
<em>to</em> <code>::1/128</code> is received on an Ethernet interface, it is promptly dropped.</p>

<h3>The interface</h3>

<pre><code>lo        UP LOOPBACK RUNNING  MTU:16436  Metric:1
</code></pre>

<p>The eponymous <code>LOOPBACK</code> flag in the flags string isn't as interesting
as the <code>MTU:16436</code>. Since the loopback interface isn't bounded by the
physical limitations of Ethernet or FDDI, its MTU is set to more than
16KiB.<br/>
We can send a <code>16 x 1024 = 16384</code> byte data packet, with an additional
<code>52</code> bytes without fragmenting it. <code>52</code> bytes are usually sufficient
for TCP and IP headers (both are 20 bytes long without options).<br/>
The concept of <code>Metric</code> is the same as it was for Ethernet interface above.</p>

<h3>Statistics and Transmit Queue Length</h3>

<pre><code>lo        RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
</code></pre>

<p>The fields for loopback statistics are printed out by the same
function and retain the same definitions from the Ethernet piece
above. However, errors and collisions have little chance of making an
appearance here, since there isn't a physical medium present.<br/>
The <code>txqueuelen</code> is set to <code>0</code> by default. It can be changed for the
<code>lo</code> device, but I doubt if that would have any effect.</p>

<hr />

<h2>Other Tools</h2>

<p>Don't like GNU <code>ifconfig</code> or don't have it? No problem, there are a few other ways of
querying a system for similar information. <code>netstat -ai</code> and <code>ifconfig</code>  also work on Mac
OS X, but the output is slightly different since both tools originate
from the BSD userland.</p>

<p>With <code>iproute2</code> --</p>

<pre><code>$ ip --statistics link list
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN mode DEFAULT 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    RX: bytes  packets  errors  dropped overrun mcast   
    67710      812      0       0       0       0      
    TX: bytes  packets  errors  dropped carrier collsns 
    67710      812      0       0       0       0      
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT qlen 1000
    link/ether 08:00:27:89:cf:84 brd ff:ff:ff:ff:ff:ff
    RX: bytes  packets  errors  dropped overrun mcast   
    10372230   53359    9       0       0       0      
    TX: bytes  packets  errors  dropped carrier collsns 
    206555     1826     0       0       0       0 
</code></pre>

<p>Or with <code>netstat</code>, on which the <code>ifconfig</code> output is actually based on --</p>

<pre><code>$ netstat --all --interfaces
Kernel Interface table
Iface       MTU Met   RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
eth0       1500 0     56092     10      0 0          3095      0 0      0      BMRU
lo        16436 0       858      0      0 0           858      0 0      0      LRU
</code></pre>

<p>The <code>Flg</code> field above shows us the status of the interfaces. <code>BMRU</code>
stands for Broadcast, Multicast, Running, and Up. <code>LRU</code> stands for
Loopback, Running, and Up.</p>

<hr />

<h2>References</h2>

<ol>
<li>Cotton, M., &amp; Vegoda, L. (2010). <em>Special Use IPv4 Addresses</em>. Internet Engineering Taskforce RFC 5735.</li>
<li>Domingo, D. &amp; Bailey, L. (Eds.). (2011). <em>Red Hat Enterprise Linux 6
Performance Tuning Guide</em>. Red Hat, Incorporated.</li>
<li>Fall, K. R., &amp; Stevens, W. R. (2011). <em>TCP/IP Illustrated, Volume 1:
The Protocols</em> (Vol. 1). Addison-Wesley Professional.</li>
<li>Hinden, R. M., &amp; Deering, S. E. (2003). <em>Internet protocol version 6
(IPv6) addressing architecture</em>. Internet Engineering Taskforce RFC 3513.</li>
<li>Hunt, C. (2002). <em>TCP/IP network administration</em>. O'Reilly Media,
Incorporated.</li>
<li>Kempen, F., Cox, A., Blundell, P., Kleen, A., Eckenfels,
B. (2007). <em>ifconfig(8) Manual Page</em>.</li>
<li>Kirch, O., &amp; Dawson, T. (2000). <em>Linux network administrator's
guide</em>. O'Reilly Media, Incorporated.</li>
</ol>

]]></content>
  </entry>
  
</feed>
